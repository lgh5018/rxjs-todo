#!/usr/bin/env node

'use strict';

const debug = require('debug')('todo:server');
const http = require('http');

const app = require('../app');
const models = require('../models');
const normalizePort = require('../utils/normalizePort');

/**
 * @desc Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || 8080);
app.set('port', port);

/**
 * @desc Create HTTP server.
 */
const server = http.createServer(app);

/**
 * @desc Bind error and listen event handlers.
 */
server.on('error', onError);
server.on('listening', onListening);

/**
 * @desc Sync Sequelize models with database.
 */
models.sequelize.sync().then(() => {
  /**
   * @desc Listen on provided port, on all network interfaces.
   */
  server.listen(port, () => console.log(`Listening on port ${port}`));
});


/**
 * @desc Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * @desc Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
